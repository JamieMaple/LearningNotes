Python语言点学习汇总
	1.运算符、表达式和类型转换
		元组
		布尔值关键字有所不同:True, False(首字母大写)
		条件判断:and/or/in/not in
	2.一些数据结构
		数据结构之间可以嵌套
		len()方法查看大小长度
		列表list[]----常用序列类型
			list函数->字符串转化为list列表
			list.function()
				list.append()方法------添加元素至末端
				list.insert()方法------添加元素至指定位置insert(0,'')
				list.count()方法-------返回形参数量
				list.remove()方法------删除指定第一个元素，可以依据值
				list.reverse()方法-----反转list元素
				list.extend()方法------添加形参列表元素至list末端
				list.sort()方法--------list排序方法(永久性排序)
				list.sorted()方法------临时排序
				.del关键字--------------删除元素
			列表用作栈和队列	
				栈：
				(Last In First Out 后进先出			 LIFO)	 
					list.pop()方法-----(default)栈末端元素弹出,可以添加索引参数
					list.append()方法--栈末端添加形参元素
				队列：
				(First In First Out 先进先出		 FIFO) 
					list.pop()方法-----(default)栈末端元素弹出,可以传形参
					list.append()方法--栈末端添加形参元素
			列表推导式
				通过将一些操作应用于序列的每个成员并通过返回的元素创建列表
				.或者通过满足特定条件的元素创建子序列	
					列表推导式由包含一个表达式的中括号组成，
					表达式后面跟随一个 for 子句，之后可以有零或多个 for 或 if 子句
					列表推导式也可以嵌套
		元组tuple()----常用序列类型
			The differences between tuples and lists are, 
				①the tuples cannot be changed unlike lists 
				②tuples use parentheses, whereas lists use square brackets.
			元组是不可变类型
			要创建只含有一个元素的元组，在值后面跟一个逗号
			function:divmod()
		集合set{}
			集合是一个无序不重复元素的集
			基本功能包括关系测试和消除重复元素
			集合对象还支持 
				联合union----------------------a | b
				交intersection-----------------a & b
				差difference-------------------a - b
				对称差集SymmetricDifference----a ^ b
			等数学运算
				想要创建空集合，你必须使用 set() 而不是 {},后者创建空字典(dict)
			function:set()
		字典dict{:}(无序的)
			字典是是无序的键值对（key:value）集合,相同字典的key必须不同
			否则后者value会覆盖前者value,key来检索
			创建:data = {'':'','':'',...}
			添加:data['key'] = 'value'
			删除:del dict['key']
			判断:'' in data
			遍历:for key in dict:(默认遍历OnlyKey)
				遍历(KeyAndValue):for key, value in dict.items()
				遍历(OnlyKey):for key in dict.keys()
				遍历(OnlyValue):for value in dict.values()
			function:dict()  可以从包含键值对的元组中创建字典
				dict.items() 遍历dict
					 for key, value in dict.items():
				sorted(dict)从小到大排序
				dict.setdefault(key, default)判断是否存在，不存在创建
				dict.get(key, default)索引键，如果键不存在，那么返回指定的 default 值
			OrderedDict:(创建有序字典--存储顺序)

		enumberate()和zip()
			enumerate()在遍历序列类型(含list、tuple)的同时获得元素索引值，你可以使用 
				示例:for i, j in enumerate(['a', 'b', 'c']):
			zip()同时遍历两个序列类型(含list和tuple)
				示例:for i, j in zip(a, b):
	3.字符串
		输出:print(''/""/""")
		(s)function:
			s.split()------------检查所有字符是否为字母数字,可以有参数
								用来指定字符串以什么字符分隔（默认为 " "）
								返回一个包含分割后的字符串列表
			s.title()------------返回字符串的标题版本
			s.upper()/lower()----返回字符串全部大/小写的版本
			s.swapcase()---------返回字符串全部大写的版本
			s.isalnum()----------检查所有字符是否为字母数字,返回布尔值
			s.isalpha()----------检查所有字符是否只有字母,返回布尔值
			s.isdigit()----------检查所有字符是否为数字，返回布尔值
			s.join()-------------使用指定字符连接多个字符串，
						它需要一个包含字符串元素的列表作为输入然后连接列表内的字符串元素
		文本操作
			s.strip(chars)
				允许有一个字符串参数，这个参数为剥离哪些字符提供依据
			s.lstrip(chars)
				l-left
			s.rstrip(chars)
				r-right
		文本搜索
			s.find(chars)
				参数:字符串，找到返回偏移量;没有，返回-1
			s.startswith(chars)
			s.endswith(chars)
				检查开头或者结尾，返回布尔值
		以及几种转化
			字符串转化list或者tuple
			 list(s)   tuple(s)
			list或者tuple转化成string
			"".join(s)
	4.函数function
		形式:
			def functionName(paramiters...):
		三种传参方式:
			位置实参
			关键字实参
			默认值传参，但也可以传入更改
		PS.传参如果是list会改变list的内容,可使用[:]进行拷贝操作
		PS.传参可以任意数量,形参带*------实际上创建空元祖然后封装--直接传参
						 形参带**-----实际上创建空字典然后封装--关键字传参
		函数模块导入:
			导入整个模块:
				import(file)---(NO .py)
				--调用:file.function_name()
			导入特定函数:
				form file import function_name
				--调用:function_name()
			关键字as:避免重名/简短化模块名
				栗子1:from file import function_name1 as function_name2
				--调用:function_name2()
				栗子2:import file as a
				--调用:a.function_name()
				栗子3:from file import *
				--调用:function_name()   注意:此时不需要模块前缀
				--其实就是复制file文件里所有函数复制到文件中，可能会出现重名，因此要谨慎

		好好理解文档字符串(docstrings):
			类  紧跟docstrings以作解释
			模块紧跟docstring
			函数也可以添加文档字符串以解释
		高阶函数:
				使用一个或多个函数作为参数,返回另一个函数作输出
			map函数:(一种高阶函数)
				它接受一个函数和一个序列（迭代器）作为输入，
				然后对序列（迭代器）的每一个值应用这个函数，
				返回一个序列（迭代器），其包含应用函数后的结果
			没有函数重载,可以通过默认参数达到
	5.类和对象
		创建类:class  大写开头
		类的一个特殊方法: __init__(self,...)创建实栗自动运行
		类的属性:self.property
		创建实例:one = Class(parameter,...)
				有默认值的情况下，创建不用传这个实例的值
		修改实例属性:
			直接通过实例访问修改
			使用方法进行修改
			使用方法递增
		继承:
			写法:
				class Children(Parent):
					def __init__(self,paramiter...)
					'''初始化父类属性，在初始化子类属性'''
						super().__init__()
						self.prop
			子类可重写父类方法
		实例用作属性
		导入类模块:import(类似于函数模块导入)
	6.文件处理
		打开:open()函数
			它需要两个参数，第一个参数是文件路径或文件名，第二个是文件的打开模式
			默认的模式为只读模式
			注意:相对路径和绝对路径
				在类Unix用/
				在Windows用\
		关闭:file.close()函数
		读取:file.read()函数
			一次性读取整个文件,再一次调用 read()，它会返回空字符串因为它已经读取完整个文件
			有一个可选的参数 size，用于指定字符串长度
			其他function:
				file.readline :能帮助你每次读取文件的一行,读完就空字符串
				file.readlines: 方法读取所有行到一个列表中
		写入:file.write()函数
			打开的时候要加w参数变为可写入模式
		with语句
			with是极好的
			它会文件用完后会自动关闭
			try-finally 块的简写
			exp:
				with open('sample.txt') as filename:
					for line in filename:
						print(line, end = " ")
		存储文件为json:
			导入json模块: import json
			两个基本方法:
				json.dump()存储文件
				json.load()读入内存
	7.异常
		1.try, except, else:
			ZeroDivisionError
				例如.5 / 0
			FileNotFoundError
				例如.文件找不到
			TypeError
				例如.数字运算时候出现字符串
		SyntaxError
		IndentationError
		NameError
		
		处理:try except...finally(用于释放外部资源)
			raise抛出异常


























